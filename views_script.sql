-------------------------------------------------------------------------------
-- views_script.sql
-- 		Guillermo Escobero (100346060)
-- 		Raul Olmedo Checa (100346073)
-------------------------------------------------------------------------------

-- e) Bacal√°: top 5 movies dropped (stop viewing) after visualizing more than
-- half of its duration (viewing 97% or more is taken as complete visualization).
CREATE OR REPLACE VIEW bacala AS
SELECT * FROM
(
  SELECT TITLE
  FROM TAPS_MOVIES
  WHERE PCT BETWEEN 51 AND 96
  GROUP BY TITLE
  ORDER BY COUNT(TITLE) DESC
)
WHERE ROWNUM<=5;

-- f) Pigeonholed: stars with more than half of their movies (at least three) in
-- a given genre; in case of several matching genres, provide all/the most frequent
CREATE OR REPLACE VIEW pigeonholed AS
SELECT A.ACTOR, GENRE, top
FROM (
		SELECT MAX(counter) as top, ACTOR
		FROM (
			SELECT GENRE, ACTOR, COUNT(TITLE) AS counter
			FROM CASTS
      NATURAL JOIN GENRES_MOVIES
			GROUP BY GENRE, ACTOR HAVING COUNT(TITLE)>=3
		)
    GROUP BY ACTOR
) A
JOIN
(
	SELECT GENRE, ACTOR, COUNT(TITLE) AS counter
	FROM CASTS
  NATURAL JOIN GENRES_MOVIES
  GROUP BY GENRE, ACTOR HAVING COUNT(TITLE)>=3
) B
ON top=counter AND A.ACTOR=B.ACTOR
WHERE top>=(SELECT COUNT(TITLE)/2 FROM CASTS GROUP BY ACTOR HAVING ACTOR=A.ACTOR)
ORDER BY TOP DESC;


-- g) All_movies: design a view with the same definition of the original old_movies.
-- TODO: Todo VARCHAR2(100) excepto PLOT_KEYWORDS que es VARCHAR2(150)
-- TODO: Pasar de C Y BN a Color y whiteblack como en fsdb.old_movies
CREATE OR REPLACE VIEW all_movies AS
SELECT COLOR, DIRECTOR_NAME, NUM_CRITIC_FOR_REVIEWS, DURATION, DIRECTOR_FACEBOOK_LIKES,
GROSS, MOVIE_TITLE, NUM_VOTED_USERS, CAST_TOTAL_FACEBOOK_LIKES,
FACENUMBER_IN_POSTER, MOVIE_IMDB_LINK, NUM_USER_FOR_REVIEWS,
FILMING_LANGUAGE, COUNTRY, CONTENT_RATING, BUDGET, IMDB_SCORE, ASPECT_RATIO, MOVIE_FACEBOOK_LIKES ,PLOT_KEYWORDS,
GENRES, ACTOR_1_NAME, ACTOR_1_FACEBOOK_LIKES, ACTOR_2_NAME, ACTOR_2_FACEBOOK_LIKES, ACTOR_3_NAME, ACTOR_3_FACEBOOK_LIKES
FROM MOVIES
LEFT OUTER JOIN (SELECT TITLE, KEYWORD AS PLOT_KEYWORDS FROM KEYWORDS_MOVIES) A ON MOVIE_TITLE=A.TITLE
LEFT OUTER JOIN (SELECT TITLE, GENRE AS GENRES FROM GENRES_MOVIES) B ON MOVIE_TITLE=B.TITLE
LEFT OUTER JOIN (SELECT TITLE, ACTOR_1_NAME, ACTOR_1_FACEBOOK_LIKES FROM (
                  (SELECT TITLE, SUBSTR((LISTAGG(ACTOR, '|') WITHIN GROUP (ORDER BY ACTOR)), 1, INSTR((LISTAGG(ACTOR, '|') WITHIN GROUP (ORDER BY ACTOR)), '|')-1) AS ACTOR_1_NAME
                  FROM CASTS
                  GROUP BY TITLE)
                  LEFT OUTER JOIN
                  (SELECT ACTOR_NAME, FACEBOOK_LIKES AS ACTOR_1_FACEBOOK_LIKES FROM PLAYERS)
                  ON ACTOR_NAME=ACTOR_1_NAME)) C ON MOVIE_TITLE=C.TITLE
LEFT OUTER JOIN (SELECT TITLE, ACTOR_2_NAME, ACTOR_2_FACEBOOK_LIKES FROM (
                  (SELECT TITLE, SUBSTR((LISTAGG(ACTOR, '|') WITHIN GROUP (ORDER BY ACTOR)), INSTR((LISTAGG(ACTOR, '|') WITHIN GROUP (ORDER BY ACTOR)), '|')+1,
                  INSTR((LISTAGG(ACTOR, '|') WITHIN GROUP (ORDER BY ACTOR)), '|', 1, 2) - INSTR((LISTAGG(ACTOR, '|') WITHIN GROUP (ORDER BY ACTOR)), '|')-1) AS ACTOR_2_NAME
                  FROM CASTS
                  GROUP BY TITLE)
                  LEFT OUTER JOIN
                  (SELECT ACTOR_NAME, FACEBOOK_LIKES AS ACTOR_2_FACEBOOK_LIKES FROM PLAYERS)
                  ON ACTOR_NAME=ACTOR_2_NAME)) D ON MOVIE_TITLE=D.TITLE
LEFT OUTER JOIN (SELECT TITLE, ACTOR_3_NAME, ACTOR_3_FACEBOOK_LIKES FROM (
                  (SELECT TITLE, SUBSTR((LISTAGG(ACTOR, '|') WITHIN GROUP (ORDER BY ACTOR)), INSTR((LISTAGG(ACTOR, '|') WITHIN GROUP (ORDER BY ACTOR)), '|', -1, 1)+1) AS ACTOR_3_NAME
                  FROM CASTS
                  GROUP BY TITLE)
                  LEFT OUTER JOIN
                  (SELECT ACTOR_NAME, FACEBOOK_LIKES AS ACTOR_3_FACEBOOK_LIKES FROM PLAYERS)
                  ON ACTOR_NAME=ACTOR_3_NAME)) E ON MOVIE_TITLE=E.TITLE;
